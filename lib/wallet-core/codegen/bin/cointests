#!/usr/bin/env ruby

# Sript for creating/updating CoinType unit tests, based on the registry.json file
# It is intended as a one-time or occasional generation, not every time! (that way the tests would have zero added value)
# Usage: codegen/bin/cointests [--coin-id coinid] [--no-skip-existing]
# Files are generated to: tests/<Coin>/TWCoinTypeTests.cpp

require 'erb'
require 'fileutils'
require 'json'
require 'optparse'

options = { :no_skip_existing => false }
OptionParser.new do |opt|
  opt.banner = "Usage: codegen/bin/cointests [options]"
  opt.on('--coin-id <coin-id>') { |o| options[:coin_id] = o.downcase }
  opt.on('--no-skip-existing') { options[:no_skip_existing] = true }
end.parse!

CurrentDir = File.dirname(__FILE__)
$LOAD_PATH.unshift(File.join(CurrentDir, '..', 'lib'))
require 'coin_test_gen'

# Transforms number to hex
def self.to_hex(i)
  hex = i.to_i().to_s(16)
  hex
end

# Display name, or name if not specified
def self.display_name(coin)
  name = coin['displayName']
  if name == nil
    name = coin['name']
  end
  name
end

# Explorer urls
def self.explorer_tx_url(c)
  path = c['explorer']['url'].to_s + c['explorer']['txPath'].to_s
end
def self.explorer_account_url(c)
  path = c['explorer']['url'].to_s + c['explorer']['accountPath'].to_s
end
def self.explorer_sample_tx(c)
  if c['explorer']['sampleTx'].nil?
    "t123"
  else
    c['explorer']['sampleTx']
  end
end
def self.explorer_sample_account(c)
  if c['explorer']['sampleAccount'].nil?
    "a12"
  else
    c['explorer']['sampleAccount']
  end
end

json_string = File.read('registry.json')
coins = JSON.parse(json_string).sort_by { |x| x['name'] }

erbs = [
  {'template' => 'TWCoinTypeTests.cpp.erb', 'folder' => 'tests/interface', 'file' => 'TWCoinTypeTests.cpp'}
]

coin_test_gen = CoinTestGen.new()
templateFile = 'TWCoinTypeTests.cpp.erb'

foundCoinId = false
coins.each do |coin|
  if options[:coin_id].nil? or coin['id'] == options[:coin_id]
    coin_test_gen.generate_coin_test_file(coin, templateFile, options[:no_skip_existing])
    foundCoinId = true
  end
end

if not options[:coin_id].nil? and not foundCoinId
  puts "Not found specified coin-id " + options[:coin_id]
  supportedIds = []
  coins.each do |coin|
    supportedIds << coin['id']
  end
  puts "Supported coin-ids: " + supportedIds.join(", ")
end  
