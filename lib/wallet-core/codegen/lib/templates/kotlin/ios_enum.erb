<%= render('kotlin/package.erb') %>

import com.trustwallet.core.<%= "TW#{entity.name}" %>.*

<%  has_string = entity.cases.all? { |c| !c.string.nil? } -%>
<%  type = ": TW#{entity.name}" -%>
actual enum class <%= entity.name %>(
    val value<%= type %>,
<%  if has_string -%>
    actual val stringValue: String,
<%  end -%>
) {
<%# Cases -%>
<%  entity.cases.each_with_index do |c, i| -%>
<%  if has_string -%>
    <%= c.name %>(TW<%= entity.name %><%= c.name %>, <%= c.string %>),
<%  else -%>
    <%= c.name %>(TW<%= entity.name %><%= c.name %>),
<%  end -%>
<%  end -%>
    ;
<%# Property declarations -%>
<%- entity.properties.each do |property| -%>

    actual val <%= KotlinHelper.format_name(property.name) %><%= KotlinHelper.return_type(property.return_type) %>
        get() = <%= KotlinHelper.convert_calling_return_type_ios(property.return_type, "TW#{entity.name}#{property.name}(value)") %>
<%- end -%>
<%# Method declarations -%>
<%- entity.methods.each do |method| -%>
<%-   next if method.name.start_with?('Delete') -%>

    actual fun <%= KotlinHelper.format_name(method.name) %>(<%= KotlinHelper.parameters(method.parameters.drop(1)) %>)<%= KotlinHelper.return_type(method.return_type) %> =
        TW<%= entity.name %><%= method.name %>(value<%= ', ' if not method.parameters.one? %><%= KotlinHelper.calling_parameters_ios(method.parameters.drop(1)) %>)<%= KotlinHelper.convert_calling_return_type_ios(method.return_type) %>
<%- end -%>
<%# Value -%>
<%  if entity.cases.any? { |e| !e.value.nil? } -%>

    companion object {
        fun fromValue(value<%= type %>): <%= entity.name %>? =
            values().firstOrNull { it.value == value }
    }
<%  end -%>
}
